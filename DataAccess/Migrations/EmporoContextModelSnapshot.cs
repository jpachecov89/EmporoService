// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(EmporoContext))]
    partial class EmporoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entity.Hospital", b =>
                {
                    b.Property<Guid>("HospitalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("DataAccess.Entity.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("ItemCost");

                    b.Property<string>("ItemDescription");

                    b.Property<int>("ItemNumber")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ItemVendorId");

                    b.Property<int>("MinimumOrderQuantity");

                    b.Property<string>("PurchaseUnitOfMeasure");

                    b.Property<string>("Upc");

                    b.HasKey("ItemId");

                    b.HasIndex("ItemNumber")
                        .IsUnique();

                    b.HasIndex("ItemVendorId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("DataAccess.Entity.ItemVendor", b =>
                {
                    b.Property<Guid>("ItemVendorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.HasKey("ItemVendorId");

                    b.ToTable("ItemVendor");
                });

            modelBuilder.Entity("DataAccess.Entity.Pharmacy", b =>
                {
                    b.Property<Guid>("PharmacyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<Guid?>("HospitalId");

                    b.Property<string>("Name");

                    b.HasKey("PharmacyId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("DataAccess.Entity.PharmacyInventory", b =>
                {
                    b.Property<Guid>("PharmacyInventoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ItemId");

                    b.Property<int>("ItemNumber");

                    b.Property<Guid>("PharmacyId");

                    b.Property<int>("QuantityOnHand");

                    b.Property<int>("ReorderQuantity");

                    b.Property<string>("SellingUnitOfMeasure");

                    b.Property<double>("UnitPrice");

                    b.HasKey("PharmacyInventoryId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PharmacyInventory");
                });

            modelBuilder.Entity("DataAccess.Entity.Item", b =>
                {
                    b.HasOne("DataAccess.Entity.ItemVendor", "ItemVendor")
                        .WithMany()
                        .HasForeignKey("ItemVendorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Entity.Pharmacy", b =>
                {
                    b.HasOne("DataAccess.Entity.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Entity.PharmacyInventory", b =>
                {
                    b.HasOne("DataAccess.Entity.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entity.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
